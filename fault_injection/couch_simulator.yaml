setup:
  version: '3'
  services:
    couch1:
      image: couchdb:latest
      network_mode: "none"
      cap_add:
      - NET_ADMIN
      environment:
        - COUCHDB_USER=admin
        - COUCHDB_PASSWORD=password
      command: couchdb
      volumes:
        - couch1:/tmp/docker/couch1_data
    couch2:
      image: couchdb:latest
      network_mode: "none"
      cap_add:
        - NET_ADMIN
      environment:
        - COUCHDB_USER=admin
        - COUCHDB_PASSWORD=password
      command: couchdb
      volumes:
        - couch2:/tmp/docker/couch2_data
    couch3:
      image: couchdb:latest
      network_mode: "none"
      cap_add:
      - NET_ADMIN
      environment:
        - COUCHDB_USER=admin
        - COUCHDB_PASSWORD=password
      command: couchdb
      volumes:
        - couch3:/tmp/docker/couch3_data

  volumes:
    couch1:
    couch2:
    couch3:
events:
  # couchdb:latest docker containers have cluster mode enabled by default
  # joining couchdbs as ring, so isolating later on is easy
  # running internal: True to run the experiment isolated
  join_couches:
    do:
      join:
        container: ["couch1", "couch2", "couch3"]
        internal: True
        mode: ring
  scan:
    dependOn: ["join_couches"]
    commands:
      - python networks.py
      # - docker ps
      # - docker inspect --format='{{json .NetworkSettings.Networks}}' $(docker ps -aqf name="couch1") >> couch1_networks.json
      # install with sudo apt install jq or sudo snap install jq
      # TODO get network name
      # - docker network ls
      # - sed 's/,$//' couch1_networks.json | jq -s '.[] | .[] | .["IPAddress"]'
      # - rm couch1_networks.json
    # docker_exec:
    #   container: couch1
    #   commands:
    #     - 'curl -X POST -H "Content-Type: application/json" http://admin:password@localhost:5984/_cluster_setup -d ''{"action": "enable_cluster", "bind_address":"0.0.0.0", "username": "admin", "password":"password", "port": 15984, "node_count": "3", "remote_node": "<remote-node-ip>", "remote_current_user": "<remote-node-username>", "remote_current_password": "<remote-node-password>" }'''
    #     - 'curl -X POST -H "Content-Type: application/json" http://admin:password@localhost:5984/_cluster_setup -d ''{"action": "add_node", "host":"<remote-node-ip>", "port": "<remote-node-port>", "username": "admin", "password":"password"}'''
  # isolate couch1 container
  event2:
    dependOn: ["scan"]
    cut:
      container: ["couch1", "couch2"]
    cut:
      container: ["couch1", "couch3"]
  clean_up:
    dependOn: ["event2"]
    cut:
      container: ["couch2", "couch3"]
